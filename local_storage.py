from js import localStorage
from pyweb import pydom
from Article import *
import json

# This file contains functions to aid in storing and retrieving articles from localStorage.

num_of_articles_key = "num_of_articles"         # key of localStorage value with total number of articles saved
articles_summary_key = "articles_summary"       # key of localStorage value with summary of all articles
liked_articles_key = "liked_articles"           # key of localStorage value with urls of all Liked articles
disliked_articles_key = "disliked_articles"     # key of localStorage value with urls of all Disliked articles
bookmarked_articles_key = "bookmarked_articles" # key of localStorage value with urls of all Bookmarked articles

# Parameters: list of Article objects to be saved in localStorage
def save_articles(articles_list):
    # Ensure elements in list
    if len(articles_list) == 0:
        return

    # Save important contextual info to be used by next page
    localStorage.setItem(num_of_articles_key, str(len(articles_list)))    # holds number of selected articles
    # Iterate thru articles and save to localStorage
    # i starts at 0
    for i, article in enumerate(articles_list):
        # Save tag
        tag_key = "tag" + str(i)
        localStorage.setItem(tag_key, article.tag)
        # Save title
        title_key = "title" + str(i)
        localStorage.setItem(title_key, article.title)
        # Save Source
        source_key = "source" + str(i)
        localStorage.setItem(source_key, article.source)
        # Save Date
        date_key = "date" + str(i)
        localStorage.setItem(date_key, article.date)
        # Save URL
        url_key = "url" + str(i)
        localStorage.setItem(url_key, article.url)
        # Save content
        content_key = "content" + str(i)
        localStorage.setItem(content_key, article.content)

# Return value: list of Article objects saved in localStorage
def retrieve_articles():
    num_of_articles = localStorage.getItem(num_of_articles_key)     # get num of saved articles
    
    # NoneType Check DO NOT CALL int() on a NoneType
    if num_of_articles is None:
        return []
    
    num_of_articles = int(num_of_articles)

    if num_of_articles == 0:
        return []
    
    # Iterate thru localStorage and build list of Article objects
    articles_list = []
    for i in range(num_of_articles):
        # Retrieve current article's info
        tag = localStorage.getItem("tag" + str(i))
        title = localStorage.getItem("title" + str(i))
        source = localStorage.getItem("source" + str(i))
        date = localStorage.getItem("date" + str(i))
        url = localStorage.getItem("url" + str(i))
        content = localStorage.getItem("content" + str(i))

        # Create Article object and append to list
        articles_list.append(Article(tag, title, source, date, url, content))

    return articles_list

# Clears temp articles in local storage
def clear_articles():
    num_of_articles = localStorage.getItem(num_of_articles_key)     # get num of saved articles
    
    # NoneType Check DO NOT CALL int() on a NoneType
    if num_of_articles is None:
        return
    
    num_of_articles = int(num_of_articles)

    if num_of_articles == 0:
        return
    
    # Iterate thru localStorage and build list of Article objects
    for i in range(num_of_articles):
        # Retrieve current article's info
        localStorage.removeItem("tag" + str(i))
        localStorage.removeItem("title" + str(i))
        localStorage.removeItem("source" + str(i))
        localStorage.removeItem("date" + str(i))
        localStorage.removeItem("url" + str(i))
        localStorage.removeItem("content" + str(i))
    
    localStorage.removeItem(num_of_articles_key)


# Save articles summary as generated by LLM
# Parameter: summary string
def save_articles_summary(summary):
    localStorage.setItem(articles_summary_key, summary)

# Return summary
def retrieve_articles_summary():
    return localStorage.getItem(articles_summary_key)

# Removes non-bookmarked summaries in local storage
def clear_summaries():
    localStorage.removeItem(articles_summary_key)

# clears items that are temporary
def clear_temp_local_storage():
    clear_articles()
    clear_summaries()

# Clears all items in localStorage
def clear_local_storage():
    localStorage.clear()

# Get liked_articles from localStorage
# Output: List of liked articles
def get_liked_articles():
    liked_articles_string = localStorage.getItem(liked_articles_key)

    if liked_articles_string is None:
        return []
    
    liked_articles_list = json.loads(liked_articles_string)
    return liked_articles_list

# Set liked_articles in localStorage
# Input: liked_articles = list of liked article URLs
def set_liked_articles(liked_articles):
    localStorage.setItem(liked_articles_key, json.dumps(liked_articles))

# Get disliked_articles from localStorage
# Output: List of disliked articles URLs
def get_disliked_articles():
    disliked_articles_string = localStorage.getItem(disliked_articles_key)

    if disliked_articles_string is None:
        return []
    
    disliked_articles_list = json.loads(disliked_articles_string)
    return disliked_articles_list

# Set disliked_articles in localStorage
# Input: disliked_articles = list of disliked articles URLs
def set_disliked_articles(disliked_articles):
    localStorage.setItem(disliked_articles_key, json.dumps(disliked_articles))

# Get bookmarked_articles from localStorage
# Output: List of bookmarked article URLs
def get_bookmarked_articles():
    bookmarked_articles_string = localStorage.getItem(bookmarked_articles_key)

    if bookmarked_articles_string is None:
        return []
    
    bookmarked_articles_list = json.loads(bookmarked_articles_string)
    return bookmarked_articles_list

# Set bookmarked_articles in localStorage
# Input: bookmarked_articles = list of bookmaked article URLs
def set_bookmarked_articles(bookmarked_articles):
    localStorage.setItem(bookmarked_articles_key, json.dumps(bookmarked_articles))